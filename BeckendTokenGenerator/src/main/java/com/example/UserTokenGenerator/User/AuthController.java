package com.example.UserTokenGenerator.User;

import com.example.UserTokenGenerator.User.DTO.JwtAuthenticationResponse;
import com.example.UserTokenGenerator.User.DTO.LoginRequestDTO;
import com.example.UserTokenGenerator.token.TokenService;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.crypto.SecretKey;
import java.util.Base64;
import java.util.Date;
import java.util.UUID;

@RestController
@RequestMapping("/api/auth")
public class AuthController {

    @Autowired
    private UserService userService;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private TokenService tokenService;

    SecretKey key = Keys.secretKeyFor(SignatureAlgorithm.HS512);

    String secretKeyString = Base64.getEncoder().encodeToString(key.getEncoded());

    @PostMapping("/login")
    public ResponseEntity<?> authenticateUser(@RequestBody LoginRequestDTO loginRequest) {
        // validate username and password
        UserModel user = userService.findUserByUsername(loginRequest.getUsername());
        if (user == null || !passwordEncoder.matches(loginRequest.getPassword(), user.getPassword())) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }

        // generate JWT token
        String token = generateToken(user);

        // store token in database
        tokenService.createToken(token, user.getId());

        // return token and role in response
        return ResponseEntity.ok(new JwtAuthenticationResponse(token, user.getRoles().iterator().next().getName()));
    }

    public String generateToken(UserModel user) {
        String tokenId = UUID.randomUUID().toString();
        long now = System.currentTimeMillis();
        Date expirationDate = new Date(now + 86400000); // token expiration time in milliseconds (24 hours)

        return Jwts.builder()
                .setId(tokenId)
                .setSubject(user.getUsername())
                .claim("role", user.getRoles().iterator().next().getName()) // include the role in the token
                .setIssuedAt(new Date())
                .setExpiration(expirationDate)
                .signWith(SignatureAlgorithm.HS512, "TJRFUXEPqF+67DCsagwJwsBAadt9rjV8VQBh7VxXWnC6v9mFWViprlgYFTBzhtRUe158PJ/JG/BmQsufV9aStg==") // use secret key generated by Keys.secretKeyFor
                .compact();
    }
}
